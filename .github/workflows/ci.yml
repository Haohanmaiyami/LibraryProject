name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 . --exclude .venv,venv,**/migrations/**

  test:
    runs-on: ubuntu-latest
    needs: lint
    env:
      DJANGO_SETTINGS_MODULE: config.settings
      SECRET_KEY: dummy
      DEBUG: "1"
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django tests (sqlite)
        run: python manage.py test --noinput -v 2

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in Docker hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image (sha + latest)
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .
          docker tag  ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest

      - name: Push Docker image (sha + latest)
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Copy compose and nginx to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'mkdir -p ~/app/nginx'
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/app/docker-compose.yml
          scp -o StrictHostKeyChecking=no nginx/nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/app/nginx/nginx.conf

      - name: Deploy with docker-compose
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          ALLOWED_HOSTS: ${{ secrets.SERVER_IP }},127.0.0.1,localhost
        run: |
          ssh -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" "SECRET_KEY='${SECRET_KEY}' DB_NAME='${DB_NAME}' DB_USER='${DB_USER}' DB_PASSWORD='${DB_PASSWORD}' DOCKER_HUB_USERNAME='${DOCKER_HUB_USERNAME}' ALLOWED_HOSTS='${ALLOWED_HOSTS}' bash -se" <<'SSH'
            set -euo pipefail
            cd ~/app
          
            # освободить 80 порт от системного nginx
            sudo systemctl stop nginx 2>/dev/null || true
            sudo systemctl disable --now nginx 2>/dev/null || true
          
            # .env для compose и Django — единый источник (ВАЖНО: без отступов внутри heredoc)
            cat > .env <<EENV
  SECRET_KEY=${SECRET_KEY}
  DEBUG=0
  ALLOWED_HOSTS=${ALLOWED_HOSTS}

  # Django DB
  NAME=${DB_NAME}
  USER=${DB_USER}
  PASSWORD=${DB_PASSWORD}
  HOST=db
  PORT=5432

  # Redis
  REDIS_URL=redis://redis:6379/0

  # Postgres container
  DB_NAME=${DB_NAME}
  DB_USER=${DB_USER}
  DB_PASSWORD=${DB_PASSWORD}

  # Web image
  WEB_IMAGE=${DOCKER_HUB_USERNAME}/myapp:latest
  EENV
  
  docker compose pull || true
  docker compose up -d --build
  docker compose ps
  curl -I http://127.0.0.1 || true
  SSH

