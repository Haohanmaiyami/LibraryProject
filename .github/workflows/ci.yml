name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 . --exclude .venv,venv,**/migrations/**

  test:
    runs-on: ubuntu-latest
    needs: lint
    env:
      DJANGO_SETTINGS_MODULE: config.settings
      SECRET_KEY: dummy
      DEBUG: "1"
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django tests (sqlite)
        run: python manage.py test --noinput -v 2

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in Docker hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image (sha + latest)
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .
          docker tag  ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest

      - name: Push Docker image (sha + latest)
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Copy compose and nginx to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'mkdir -p ~/app/nginx'
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/app/docker-compose.yml
          scp -o StrictHostKeyChecking=no nginx/nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/app/nginx/nginx.conf

      - name: Deploy with docker-compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e
          cd ~/app
          
          cat > .env <<EENV
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        DEBUG=0
        ALLOWED_HOSTS=${{ secrets.SERVER_IP }},127.0.0.1,localhost

        # Postgres (имена должны совпадать с тем, что ожидает твой settings.py)
        NAME=${{ secrets.DB_NAME }}
        USER=${{ secrets.DB_USER }}
        PASSWORD=${{ secrets.DB_PASSWORD }}
        HOST=db
        PORT=5432

        # Redis
        REDIS_URL=redis://redis:6379/0
        EENV
        
        # 2) Образ веба, который мы запушили в job build
        export WEB_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
        
        # 3) Перезапуск через compose
        docker compose down || true
        docker compose pull || true
        docker compose up -d --build
        
        # 4) Проверка
        docker compose ps
        EOF
