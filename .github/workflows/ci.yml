name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 . --exclude .venv,venv,**/migrations/**

  test:
    runs-on: ubuntu-latest
    needs: lint
    env:
      DJANGO_SETTINGS_MODULE: config.settings
      SECRET_KEY: dummy
      DEBUG: "1"
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django tests (sqlite)
        run: python manage.py test --noinput -v 2

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in Docker hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .

      - name: Push Docker image in Docker hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to server (SQLite mode for demo)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e

          # 0) Если на хосте есть nginx на :80 — тихо остановим
          sudo systemctl stop nginx 2>/dev/null || true

          # 1) Освободим порт 80 от любых контейнеров
          for name in $(docker ps --format '{{.Names}} {{.Ports}}' | awk '/:80->/ {print $1}'); do
            docker stop "$name" || true
            docker rm   "$name" || true
          done

          # 2) Удалим наш контейнер по имени в любом состоянии
          docker ps -aq -f name=^myapp$ | xargs -r docker rm -f

          # 3) Стянем свежий образ текущего коммита
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

          # 4) Запускаем приложение на SQLite (учебный вариант для проверки доступности по IP)
          docker run -d --restart unless-stopped --name myapp \
            -p 80:8000 \
            -e DJANGO_SETTINGS_MODULE=config.settings \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -e DEBUG=0 \
            -e ALLOWED_HOSTS="${{ secrets.SERVER_IP }},127.0.0.1,localhost" \
            -e FORCE_SQLITE=1 \
            ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

          # 5) Применим миграции (на всякий случай) и проверим локально
          docker exec myapp python manage.py migrate --noinput || true
          curl -I http://127.0.0.1 || true
          EOF




#name: Django CI
#
#on: [push, pull_request]
#
#jobs:
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
#
#      - name: Install flake8
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8
#
#      - name: Run flake8
#        run: flake8 . --exclude .venv,venv,**/migrations/**
#
#  test:
#    runs-on: ubuntu-latest
#    needs: lint
#    env:
#      DJANGO_SETTINGS_MODULE: config.settings
#      # чтобы Django не требовал реальный Postgres и спокойно создал test DB на sqlite,
#      # у тебя в settings есть ветка "if 'test' in sys.argv" -> sqlite
#      SECRET_KEY: dummy
#      DEBUG: "1"
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
#
#      - name: Cache pip
#        uses: actions/cache@v3
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#          restore-keys: ${{ runner.os }}-pip-
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#
#      - name: Run Django tests (sqlite)
#        run: python manage.py test --noinput -v 2
#
#  build:
#    needs: test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Log in Docker hub
#        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
#
#      - name: Build Docker image
#        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .
#
#      - name: Push Docker image in Docker hub
#        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set up SSH
#        uses: webfactory/ssh-agent@v0.9.0
#        with:
#          ssh-private-key: ${{ secrets.SSH_KEY }}
#
#      - name: Deploy to server
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#          set -e
#
#          # 0) Если на хосте есть nginx на :80 — тихо остановим
#          sudo systemctl stop nginx 2>/dev/null || true
#
#          # 1) Освободим порт 80 от любых контейнеров
#          for name in $(docker ps --format '{{.Names}} {{.Ports}}' | awk '/:80->/ {print $1}'); do
#            docker stop "$name" || true
#            docker rm   "$name" || true
#          done
#
#          # 2) Удалим наш контейнер по имени в любом состоянии
#          docker ps -aq -f name=^myapp$ | xargs -r docker rm -f
#
#          # 3) Стянем свежий образ текущего коммита
#          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#
#          # 4) Запустим приложение (gunicorn внутри образа), публикуем 8000 -> 80
#          docker run -d --restart unless-stopped --name myapp \
#            -p 80:8000 \
#            -e DJANGO_SETTINGS_MODULE=config.settings \
#            -e ALLOWED_HOSTS="${{ secrets.SERVER_IP }},127.0.0.1,localhost" \
#            ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
#          EOF
